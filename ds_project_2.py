# -*- coding: utf-8 -*-
"""DS_Project_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wRKJmp7O5R7BrCRUrzL7IUrCmOrG1fH1

# **E-Commerce Dataset EDA**

<div class="alert alert-success">  
<h3><strong>Imports</strong></h3>
</div>
"""

import warnings
warnings.filterwarnings('ignore')

# for some basic operations
import numpy as np
import pandas as pd

# for visualizations
import matplotlib.pyplot as plt
import seaborn as sns
from pandas import plotting
# from pandas_profiling import ProfileReport
from pandas.plotting import parallel_coordinates
from IPython.display import display, Markdown
# import datasist as ds

# for providing path


import os
# print(os.listdir("../input"))

# for modelling

import sklearn
import imblearn

# set seaborn styles
sns.set(style="whitegrid")

df = pd.read_excel('dataset_ecommerce_cleaned.xlsx')

df.head()

#Membuat nama kolom menjadi format yang mudah di Pandas
df.columns = df.columns.str.strip().str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')

df.info()

"""<div class="alert alert-success">  
<h3><strong>Simple Statistic Data</strong></h3>
</div>
"""

df.describe()

def describe_detail(df):
    # Display function with Markdown for titles
    def display_markdown(title):
        display(Markdown(f"**{title}**"))

    # (a) First five data points
    display_markdown('First five data points')
    display(df.head())

    # (b) Random five data points
    display_markdown('Random five data points')
    display(df.sample(5))

    # (c) Last five data points
    display_markdown('Last five data points')
    display(df.tail())

    # (d) Shape and Size of data set
    shape_size_df = pd.DataFrame({'Shape': [df.shape], 'Size': [df.size]})
    display_markdown('Shape and Size of dataset')
    display(shape_size_df)

    # (e) Data types
    data_types_df = pd.DataFrame(df.dtypes, columns=['Data Type'])
    display_markdown('Data types of columns')
    display(data_types_df)

    # (f) Numerical features in the dataset
    display_markdown('Numerical features in the dataset')
    display(df.select_dtypes(include=[np.number]).columns.tolist())

    # (g) Categorical features in the dataset
    categorical_features = df.select_dtypes(include=['object', 'category']).columns.tolist()
    display_markdown('Categorical features in the dataset')
    display(categorical_features)

    # (h) Statistical Description of Columns
    display_markdown('Statistical Description of Numerical Columns')
    display(df.describe())

    # (i) Description of Categorical features
    display_markdown('Description of Categorical Features')
    display(df.describe(include=['object', 'category']))

    # (j) Unique class count of Categorical features
    unique_counts_df = pd.DataFrame(df[categorical_features].nunique(), columns=['Unique Count'])
    display_markdown('Unique class count of Categorical features')
    display(unique_counts_df)

    # (k) Missing values in data
    missing_values_df = pd.DataFrame(df.isnull().sum(), columns=['Missing Values'])
    missing_values_df = missing_values_df[missing_values_df['Missing Values'] > 0]
    display_markdown('Missing values in data')
    display(missing_values_df)

# Assuming 'df' is your DataFrame
describe_detail(df)

"""<div class="alert alert-success">  
<h3><strong>Missing Values Info</strong></h3>
</div>
"""

def display_missing(data):
  total_missing = data.isnull().sum()
  percent_missing = (data.isnull().sum() / data.shape[0]) * 100
  missing_data = pd.DataFrame({'Total Missing': total_missing, 'Percent Missing': percent_missing})
  missing_data = missing_data[missing_data['Total Missing'] > 0]
  missing_data = missing_data.sort_values(by='Total Missing', ascending=False)

  return missing_data

missing_data = display_missing(df)
missing_data

#Membagi missing values fill categorikal ---> MODUS Numerical --> Mean
categorical_columns = df.select_dtypes(include=['object', 'category']).columns
numerical_columns = df.select_dtypes(include=['number']).columns

#Loop untuk fill missing values
for col in categorical_columns:
  df[col].fillna(df[col].mode()[0], inplace=True)

for col in numerical_columns:
  df[col].fillna(df[col].mean(), inplace=True)

missing_data = display_missing(df)
missing_data

"""# **Delete Dollar Sign From Sales, Profit, Shipping Cost**"""

df.loc[536, :]

df['sales'] = df['sales'].astype(str).str.replace('[^\d,]', '', regex=True).astype(float)
df['profit'] = df['profit'].astype(str).str.replace('[^\d,]', '', regex=True).astype(float)

#df.drop(df.index[535], inplace=True)
df['shipping_cost'] = df['shipping_cost'].astype(str).replace('[^\d,]', '', regex=True).astype(float)
df.head()

df_ship_mode = df['ship_mode'].value_counts().reset_index()
df_ship_mode.columns = ['ship_mode', 'count']

plt.figure(figsize=(15, 6))
ax = sns.barplot(data=df_ship_mode, x='ship_mode', y='count', palette="winter")

ax.set_title('Ship Mode Distribution')
ax.set_xlabel('Mode of Shipping')
ax.set_ylabel('Count')
ax.set_xticklabels(ax.get_xticklabels(), rotation=90)

for p in ax.patches:
    ax.annotate(format(p.get_height(), '.0f'),
                (p.get_x() + p.get_width() / 2., p.get_height()),
                ha='center', va='center',
                xytext=(0, 9),
                textcoords='offset points')

plt.xticks(rotation=45)
sns.despine()

plt.show()

"""<div class="alert alert-info">
  <p>Standard Class shipment adalah yang paling banyak diminati diantara metode pengiriman. Prilaku seperti ini bisa jadi karena kebanyakan pelangga standard delivery daripada harus membayar lebih</p>
</div>
"""

plt.figure(figsize=(8, 5))
ax = sns.countplot(x='product_category', data=df, palette='viridis')

ax.set_title('Count for Product Category')

plt.xticks(rotation=45)
ax.set_xlabel('Product Category')
ax.set_ylabel('Count')

sns.despine()

plt.show()

"""<div class="alert alert-info">
<p>Dari sisi kategori product, Fashion adalah product yang paling diminati oleh pelanggan</p>
</div>
"""

median_sales = df.groupby(['ship_mode', 'product_category'])['sales'].median().reset_index()

plt.figure(figsize=(10, 5))
ax = sns.barplot(x='ship_mode', y='sales', hue='product_category', data=median_sales, palette='viridis')

ax.set_title('Median Sales for Each Product Category by Ship Mode')
ax.set_xlabel('Ship Mode')
ax.set_ylabel('Median Sales')

plt.legend(title='Product Category')

plt.xticks(rotation=45)

sns.despine()

plt.show()

"""<div class="alert alert-info">
<p>Standard class menjadi metode pengiriman yang lebih banyak menghasilkan sales(penjualan) daripada metode lain. Ini dikarenakan banyak pelanggan yang memesan product category Fashion mengguanakan metode tersebut.</p>
</div>
"""

mean_sales = df.groupby(['product_category', 'order_priority'])['sales'].mean().reset_index()

plt.figure(figsize=(10, 5))
ax = sns.barplot(x='product_category', y='sales', hue='order_priority', data=mean_sales, palette='viridis')

ax.set_title('Mean Sales for Product Category')
ax.set_xlabel('Product Category')
ax.set_ylabel('Mean Sales')

plt.legend(title='Order Priority')
plt.xticks(rotation=45)
sns.despine()

plt.show()

"""Order Priority dari kategori selain fashion memiliki priority critical, sementara priority dari fashion memiliki low priority tidak seperti kategori lain. Dari sini bisa kia asumsikan faktor ini lah yang mempunyai pengaruh terhadap banyaknya Standard class ship mode"""

fig, ax = plt.subplots(1,1, figsize=(18,6))
#Sort descending berdasarkan count ambil hanya 20 rows
df_prod=df['product'].value_counts().sort_values(ascending=False).to_frame()[:20]
ax=sns.barplot(data=df_prod,x=df_prod.index,y='product',palette="winter_r")
ax.set_title('Product Sold in Online Sale')

ax.set_xlabel('Mode of Shipping')
ax.set_ylabel('Count')
ax.set_xticklabels(ax.get_xticklabels(),rotation=60)
for p in ax.patches:
    ax.annotate(format(p.get_height(), '1.0f'),
                   (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha = 'center', va = 'center',
                   xytext = (0, 9),
                   textcoords = 'offset points')
for s in ['top', 'left', 'right', 'bottom']:
    ax.spines[s].set_visible(False)

plt.show()

"""<div class="alert alert-info">
  <p>Sportswear adalah yang paling banyak diminati oleh pelanggan diikuti dengan Fosil Watch, Sneakers, Formal Shoes, casual, Shoes, Suits, Jeans, dan T-shirt.</p>
</div>
"""

grpcount = pd.DataFrame(df.groupby('state')['sales'].sum()).reset_index()
grpcount_ = grpcount.sort_values(by = 'sales', ascending = False)

top_20_states = grpcount_.iloc[:20]

plt.figure(figsize=(20, 6))
ax = sns.barplot(x='state', y='sales', data=top_20_states, palette='viridis')

ax.set_title('Top 20 States based on Sales')
plt.xticks(rotation=45)

sns.despine()

plt.show()

"""<div class="alert alert-info">
  <p>California menjadi provisi yang paling banyak pelanggan yang membeli diikuti dengan England, UK dan New York, US</p>
</div>
"""

grpcount = pd.DataFrame(df.groupby('customer_name')['sales'].sum()).reset_index()
grpcount_ = grpcount.sort_values(by = 'sales', ascending = False)

top_20_customers = grpcount_.iloc[:20]

plt.figure(figsize=(10, 8))
ax = sns.barplot(x='sales', y='customer_name', data=top_20_customers, palette='coolwarm')

ax.set_title('Top 20 Customers by Sales')

for p in ax.patches:
    width = p.get_width()
    plt.text(p.get_width(), p.get_y() + p.get_height() / 2.,
             '{:1.2f}'.format(width),
             ha='left', va='center')

plt.tight_layout()

sns.despine()

plt.show()

region_profit = df.groupby('region')['profit'].sum().reset_index()
labels = region_profit['region']
sizes = region_profit['profit']

plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, textprops={'fontsize': 8})
plt.title('Region-wise Profit Earned')

plt.show()

plt.figure(figsize=(10, 6))
ax = sns.countplot(x='ship_mode', data=df, palette='viridis')
ax.set_title('Count of Records by Ship Mode')
plt.xticks(rotation=45)

plt.show()

mean_sales = df.groupby(['region', 'segment'])['sales'].mean().reset_index()

g = sns.catplot(x='region', y='sales', hue='segment', data=mean_sales, kind='bar', height=5, aspect=3, palette='viridis')
g.fig.suptitle('Mean Sales per Region by Segment', y=1.05)

plt.xticks(rotation=45)

plt.show()

df.drop(df.index[321],inplace=True)
df['order_date'] = pd.to_datetime(df['order_date'])
df['ship_date'] = pd.to_datetime(df['ship_date'])
df['quantity'] = pd.to_numeric(df['quantity'])

#delay dalam pengiriman
df['lapsdays'] = (df['ship_date'] - df['order_date']).dt.days

mean_lapsdays = df.groupby(['ship_mode', 'order_priority'])['lapsdays'].mean().reset_index()
g = sns.catplot(x='ship_mode', y='lapsdays', hue='order_priority', data=mean_lapsdays,
                kind='bar', height=5, aspect=3, palette='viridis')
g.fig.suptitle('Mean Lapsdays per Ship Mode by Order Priority', y=1.05)

plt.xticks(rotation=45)

plt.show()

grpcount = pd.DataFrame(df.groupby('segment')['lapsdays'].sum()).reset_index()
grpcount_ = grpcount.sort_values(by = 'lapsdays', ascending = False)

labels = ['Consumer', 'Corporate','Home Office']
size = grpcount_['segment'].value_counts()
colors = ['green', 'lightskyblue','lightblue']
explode = [0, 0.1,0.1]

plt.rcParams['figure.figsize'] = (8, 8)
plt.pie(size, colors = colors, explode = explode, labels = labels, shadow = True, autopct = '%.2f%%')
plt.title('Segment Pie to Laps Days', fontsize = 20)
plt.axis('off')
plt.legend()
plt.show()

"""<div class="alert alert-info">
  <p>Hampir semua ship mode terkena delay untuk semua ship mode kecuali same day</p>
</div>
"""

plt.figure(figsize=(12,8))
sns.kdeplot(df['sales'][df.order_priority == 'Medium'], shade=False)
sns.kdeplot(df['sales'][df.order_priority == 'Critical'], shade=True)
sns.kdeplot(df['sales'][df.order_priority == 'High'], shade=False)
plt.legend(['Medium', 'Critical','High'])
plt.title('Sales Distribution ')
plt.show()

plt.figure(figsize=(12,8))
sns.kdeplot(df['profit'][df.region == 'Central'], shade=True)
sns.kdeplot(df['profit'][df.region == 'North'], shade=False)
sns.kdeplot(df['profit'][df.region == 'South'], shade=True)
sns.kdeplot(df['profit'][df.region == 'East'], shade=False)
sns.kdeplot(df['profit'][df.region == 'West'], shade=True)

plt.legend(['Central', 'North','South','East','West'])
plt.title('Profit Distribution ')
plt.show()

mean_profit = df.groupby('segment')['profit'].mean().reset_index()

sns.set(style="whitegrid")

plt.figure(figsize=(15, 5))
ax = sns.lineplot(x='segment', y='profit', data=mean_profit, marker='o')

ax.set_title('Line Plot for Profit Earned Segment-wise')
plt.xticks(rotation=45)

plt.show()

mean_quantity = df.groupby(['ship_mode', 'segment'])['quantity'].mean().reset_index()

plt.figure(figsize=(15, 5))
ax = sns.lineplot(x='ship_mode', y='quantity', hue='segment', data=mean_quantity, marker='o')

ax.set_title('Line Plot for Quantity vs. Ship Mode and Segment')
plt.legend(title='Segment')
plt.xticks(rotation=45)

plt.show()

f, ax = plt.subplots(1, 2, figsize=(20, 10))

sns.boxenplot(x="ship_mode", y="profit", hue="segment", data=df, ax=ax[0])
ax[0].set_title('Segment and Profit vs Ship Mode')

sns.boxenplot(x="ship_mode", y="sales", hue="segment", data=df, ax=ax[1])
ax[1].set_title('Segment and Sales vs Ship Mode')

plt.show()

axes = sns.relplot(x="months", y="sales", hue="product_category",
                size="quantity", data=df,palette='winter', sizes=(100, 300),alpha=0.5,aspect=2)
axes.set(xlabel='Months',title="Months wise Sales")

axes.set_xticklabels()

# dxp.scatter(x='sales', y='profit', data=df, split='product_category', col='segment', col_order=['Consumer','Corporate'],title = 'Scatter for Profit and Sales')

g = sns.FacetGrid(df, col='segment', col_order=['Consumer', 'Corporate','Home Office'], hue='product_category', height=5, aspect=1)
g.map(plt.scatter, 'sales', 'profit', alpha=.7)
g.add_legend()

g.set_titles('{col_name}')
g.fig.suptitle('Scatter for Profit and Sales', fontsize=16, y=1.05)

plt.show()

fig, ax = plt.subplots(1,1, figsize=(15,6))
XP=df.city.value_counts().sort_values(ascending=False).to_frame()[:10]
ax=sns.barplot(data=XP,x=XP.index,y='city')
ax.set_title('Top Cities with Most Online Customers')

ax.set_xlabel('City')
ax.set_ylabel('Counts')
ax.set_xticklabels(ax.get_xticklabels(),rotation=90)
for p in ax.patches:
    ax.annotate(format(p.get_height(), '1.0f'),
                   (p.get_x() + p.get_width() / 2., p.get_height()),
                   ha = 'center', va = 'center',
                   xytext = (0, 9),
                   textcoords = 'offset points')
for s in ['top', 'left', 'right', 'bottom']:
    ax.spines[s].set_visible(False)

"""# Homework

Buat analisis tambahan berdasarkan data di atas, gunakan chart sesuai dengan analisis yang dibutuhkan menggunakan Python & Google Data Studio (looker studio)

1.   Bagaimana tren penjualan di benua Asia tahun ke tahun?
2.   Negara mana saja yang memiliki potensti untuk menghasilkan keuntungan (profit) paling besar sesudah urutan pertama?
3.   Siapakah 5 pembeli yang paling banyak membeli (Count) dari data ini?
4.   Dari rata-rata antar region, product category apakah yang paling banyak diminati?
5.   Untuk mencapai maksimum profit, barang apa sajakah yang harus di stok lebih banyak oleh toko untuk kedepannya?
"""

df.to_excel("dataset_ecommerce_cleaned.xlsx")

df['year'] = df['order_date'].dt.year

df.head()

df['month'] = df['order_date'].dt.month

filtered_df = df[(df['region'] == 'Central Asia') | (df['region'] == 'North Asia') | (df['region'] == 'Southeast Asia')]

monthly_sales_by_region = filtered_df.groupby(['month', 'region'])['sales'].sum().reset_index()

plt.figure(figsize=(10, 6))
sns.barplot(x='month', y='sales', hue='region', data=monthly_sales_by_region, palette='viridis')
plt.title('Tren Penjualan di Benua Asia (Central, North, Southeast)',y=1.05,fontsize=18 )
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.legend(title='Region')
plt.show()

"""Berdasarkan data yang diperoleh Southeast Asia menjadi region di Asia yang memiliki tren penjualan atau total sales tertingi sejak Januari 2015 sampai Desember 2015, diikuti oleh region North Asia dan Central Asia. Total sales untuk region Asia tidak ada penjualan di tahun 2016."""

top_country_count = pd.DataFrame(df.groupby('country')['profit'].sum()).reset_index()
top_country_count = top_country_count.sort_values(by = 'profit', ascending = False)

top_country_count = top_country_count.iloc[:10]

plt.figure(figsize=(14, 8))
ax = sns.barplot(x='profit', y='country', data=top_country_count, palette='twilight_shifted')

ax.set_title('Top 10 Country by Profit', fontsize=24)

for p in ax.patches:
    width = p.get_width()
    plt.text(p.get_width(), p.get_y() + p.get_height() / 2.,
             '{:1.2f}'.format(width),
             ha='left', va='center')

plt.tight_layout()

sns.despine()

plt.show()

"""Setelah United States yang menjadi negara dengan profit terbesar di dunia, Australia menjadi negara berikutnya dengan profit terbesar diikuti dengan France dan Mexico."""

result_top_orders = df.groupby('customer_name').agg({'order_id': pd.Series.nunique}).sort_values(by='order_id', ascending=False).reset_index().head(5)
explode = [0.05, 0.05,0.05,0.05,0.05]
colors=['lightblue', 'lightgreen', 'lightcoral', 'lightskyblue', 'lightpink']

plt.figure(figsize=(8, 8))
plt.pie(result_top_orders['order_id'], labels=result_top_orders['customer_name'], explode = explode,shadow = True, autopct='%2f%%',colors=colors )
plt.title('Top 5 Best Customer',y=1.1, fontsize = 24)
plt.axis('equal')

plt.show()

"""Dari data diatas, 5 customer yang paling sering membeli di ecommerce yaitu Micclain O'Donnell, Spears Thornton, Bates Gockenbach, Booth Pistole, dan Flores Brooks."""

mean_sales_per_region = df.groupby(['region', 'product_category'])['sales'].mean().reset_index()

g = sns.catplot(x='region', y='sales', hue='product_category', data=mean_sales_per_region, kind='bar', height=5, aspect=3, palette='terrain')
g.fig.suptitle('Mean Sales per Region by Product Category', y=1.1, fontsize=24)

plt.xticks(rotation=45)

plt.show()

"""Product category Fashion menjadi category yang paling banyak diminati di semua region di dunia berdasarkan data rata-rata penjualan sales, kemudian category Electronic dan category Auto & Accessories menjadi category yang diminati berikutnya serta category Home & Furniture menjadi product category yang paling kecil diminati dibandingkan category lainnya."""

print(f'The earliest date is {df["order_date"].min()}')
print(f'The latest date is {df["order_date"].max()}')

best_profit_by_product = pd.DataFrame(df.groupby('product')['profit'].max()).reset_index()
best_profit_by_product = best_profit_by_product.sort_values(by = 'profit', ascending = False)

top_10_best_product = best_profit_by_product.iloc[:10]

plt.figure(figsize=(18, 6))
ax = sns.barplot(x='product', y='profit', data=top_10_best_product, palette='gnuplot2')

ax.set_title('Top 10 Product by Max Profit', fontsize=24)
plt.xticks(rotation=45)

sns.despine()

plt.show()

"""Untuk mencapai maksimum profit, perusahaan harus merestock 10 product dengan profit terbesar yaitu Apple Laptop, Tyre, T-shirt, Car Pillow & Nect Rest, Towels, Titak watch, Running shoes, Iron, Samsung Mobile, dan Jeans."""